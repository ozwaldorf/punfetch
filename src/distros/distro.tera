use std::fmt;
use num_enum::FromPrimitive;

#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, FromPrimitive)]
#[allow(clippy::upper_case_acronyms)]
#[repr(usize)]
pub enum Distro {
    #[num_enum(default)]
    {% for distro, attrs in distros -%}
    {{ attrs.type_name }},
    {% endfor %}
}

impl Distro {
    fn regex() -> regex::RegexSet {
        regex::RegexSet::new([
            {% for distro, attrs in distros -%}
            r#"{{ attrs.regex }}"#,
            {% endfor %}
        ]).unwrap()
    }

    pub fn width(&self) -> usize {
        match self {
            {% for distro, attrs in distros -%}
                Distro::{{ attrs.type_name }} => {{ attrs.width }},
            {% endfor %}
        }
    }

    pub fn ascii(&self) -> &'static str {
        match self {
            {% for distro, attrs in distros -%}
                Distro::{{ attrs.type_name }} => {
"{{ attrs.ascii | addslashes }}"
                },
            {% endfor %}
        }
    }

    pub fn ascii_stripped(&self) -> &'static str {
        match self {
            {% for distro, attrs in distros -%}
                Distro::{{ attrs.type_name }} => {
"{{ attrs.ascii_stripped | addslashes }}"
                },
            {% endfor %}
        }
    }
}

impl fmt::Display for Distro {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            {% for distro, attrs in distros -%}
                Self::{{ attrs.type_name }} => write!(f, "{{ distro }}"),
            {% endfor %}
        }
    }
}

// Ensure there are equal number of basic and true colors
{% for distro, attrs in distros -%}
    {% if attrs.colors.rgb %}
        {% set ansi_length = attrs.colors.ansi | length -%}
        {% set rgb_length = attrs.colors.rgb | length %}
        {% if ansi_length != rgb_length %}
            compile_error!("{{ distro }}: ansi and rgb colors must be the same length");
        {% endif %}
    {% endif -%}
{% endfor -%}
